package controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.Model;

import org.genericdao.RollbackException;

import controller.actions.AddNegVoteAction;
import controller.actions.FavoriteAction;
import controller.actions.IndexAfterAction;
import controller.actions.LogoutAction;
import controller.actions.RetweetAction;
import controller.actions.SearchAction;
import controller.actions.SignInWithTwitterAction;
import controller.actions.SignInWithTwitterTwoAction;
import controller.actions.UploadAction;
import controller.actions.IndexAction;
import controller.actions.addCommentAction;
import controller.actions.AddPosVoteAction;

public class Controller extends HttpServlet {

	private static final long serialVersionUID = 1L;

	@Override
	public void init() throws ServletException {

		Model model = new Model(getServletConfig());

		Action.add(new UploadAction(model));
		Action.add(new IndexAction(model));
		Action.add(new addCommentAction(model));
		Action.add(new SignInWithTwitterAction());
		Action.add(new SignInWithTwitterTwoAction());
		Action.add(new IndexAfterAction(model));
		Action.add(new SearchAction(model));
		Action.add(new AddPosVoteAction(model));
		Action.add(new AddNegVoteAction(model));
		Action.add(new RetweetAction(model));
		Action.add(new LogoutAction());
		Action.add(new FavoriteAction(model));

	}

	@Override
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String nextPage;
		try {
			
			nextPage = performTheAction(request);
			sendToNextPage(nextPage, request, response);
		} catch (RollbackException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*
	 * Extracts the requested action and (depending on whether the user is
	 * logged in) perform it (or make the user login).
	 * 
	 * @param request
	 * 
	 * @return the next page (the view)
	 */
	private String performTheAction(HttpServletRequest request)
			throws RollbackException {
		String servletPath = request.getServletPath();
		String action = getActionName(servletPath);

		if (action.equals("welcome")) {
			// User is logged in, but at the root of our web app
			return Action.perform("index.do", request);
		}

		// Let the logged in user run his chosen action
		return Action.perform(action, request);
	}

	/*
	 * If nextPage is null, send back 404 If nextPage ends with ".do", redirect
	 * to this page. If nextPage ends with ".jsp", dispatch (forward) to the
	 * page (the view) This is the common case
	 */
	private void sendToNextPage(String nextPage, HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException {
		if (nextPage == null) {
			response.sendError(HttpServletResponse.SC_NOT_FOUND,
					request.getServletPath());
			return;
		}

		if (nextPage.endsWith(".do")) {
			response.sendRedirect(nextPage);
			return;
		}
		if (nextPage.endsWith(".jsp")) {
			RequestDispatcher d = request.getRequestDispatcher("WEB-INF/"
					+ nextPage);
			d.forward(request, response);
			return;
		}
		if (nextPage.contains("api.twitter.com")) {
			response.sendRedirect(nextPage);
		}

		else {
			if (nextPage.contains("http://"))
				response.sendRedirect(nextPage);
			else
				response.sendRedirect("http://" + nextPage);
			return;

		}

	}

	/*
	 * Returns the path component after the last slash removing any "extension"
	 * if present.
	 */
	private String getActionName(String path) {
		// We're guaranteed that the path will start with a slash
		int slash = path.lastIndexOf('/');
		return path.substring(slash + 1);
	}
}
